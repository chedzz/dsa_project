#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>
unsigned long long int ran_no_gen();
unsigned long long int prime_gen();
unsigned long long int my_pow(unsigned long long int x, unsigned long long int y,unsigned long long int n);
int  prime(unsigned long long int p);
time_t tt;
int main() {
	unsigned long long int p, q = 0, totient, e;
	int ran_count = 0;
	printf("in main()\n");
	srandom(time(&tt));
	printf("generating first prime\n");
	p = prime_gen(RAND_MAX);
	printf("Back to main() after First prime number\n");
	printf("generating second prime number\n");	
	while(1) {
		
		q = prime_gen(RAND_MAX);
		ran_count++;
		if(q != p)
			break;
	}
	printf("Back to main() after second prime after ran_count = %d\n", ran_count);
	printf("p = %llu\nq = %llu\n", p, q);
		            
        
	totient = (p - 1) * (q - 1);
	while(1) {
		e = prime_gen(totient - 1);
		if((totient % e) != 0)
			break;
	}
	printf("totient = %llu\n", totient);	
	printf("e = %llu\n", e);
	return 0;
}
int  prime(unsigned long long int p) {
	printf("p = %llu\n", p);
	if(p%2==0)
		return 0;		
	long long int k = 0;
	unsigned long long int exp, a;
	time_t tt;
	unsigned long long int d = p - 1;
	while(d % 2 == 0) {
		d /= 2;
		k++;
	}
	printf("k = %lld \t m = %llu\n", k, d);
	srandom(time(&tt));
	a = 2 + random() % (p - 3);
	exp = my_pow(a , d, p);
	if(exp == 1 || exp == p -1) 
		return 1;
	while(d != p - 1) {
		exp = my_pow(exp , 2, p);
		d = d * 2;
		if(exp == 1) 
			return 0;	
		if(exp == p-1) 
			return 1;
	}
	return 0;
}
unsigned long long int my_pow(unsigned long long int x, unsigned long long int y,unsigned long long int n) {
	unsigned long long int res = 1;
	x = x % n;
	while(y > 0) {
		if(y & 1) {
			res = (res * x) % n;
		}
		y = y / 2;
		x = (x * x) % n;
	}
	return res;
}
unsigned long long int prime_gen(unsigned long long int range) {
	unsigned long long int n, t;
	int type = -1;
        int count = 0;
	while(1) {
		n = random();
		if(n < range) 
			break;
	}
	printf("n originally = %llu\n", n);
	t = n / 6;
	printf("t = %llu\n", t);
	n = 6 * t + 1;
	printf("now n = %llu\n", n);
	while(type != 1) {
		type = prime(n);		
		count++;
		++t;
		n = 6 * t + 1;
	}
	printf("back to prime_gen after prime() and after making type = 1\n");
	if(type == 1) {
		printf(" prime found after %d loops\n prime is :%llu\n", count, n);
	}	
	return n;
}
 
